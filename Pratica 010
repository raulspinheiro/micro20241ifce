#include <WiFi.h>
#include <ArduinoOTA.h>
#include <Arduino.h>

// Configurações da rede Wi-Fi
const char* ssid = "SEU_SSID";
const char* senha = "SUA_SENHA";

// Definição dos pinos para o LED RGB
const int pinoVermelho = 26;
const int pinoVerde = 25;
const int pinoAzul = 33;  // Adicionando um pino para o azul
const int pinoBotao = 27; // Pino do botão

// Variável para verificar o estado do botão
volatile bool botaoPressionado = false;

// Função de interrupção para lidar com o botão
void IRAM_ATTR tratarPressionamentoBotao() {
  botaoPressionado = true;
}

// Função para definir a cor do LED RGB
void setColor(int vermelho, int verde, int azul) {
  analogWrite(pinoVermelho, vermelho);
  analogWrite(pinoVerde, verde);
  analogWrite(pinoAzul, azul);
}

void setup() {
  // Inicializar comunicação serial
  Serial.begin(115200);

  // Configurar os pinos do LED RGB como saída
  pinMode(pinoVermelho, OUTPUT);
  pinMode(pinoVerde, OUTPUT);
  pinMode(pinoAzul, OUTPUT);
  
  // Configurar o pino do botão como entrada com resistor pull-up
  pinMode(pinoBotao, INPUT_PULLUP);

  // Associar a interrupção ao pino do botão
  attachInterrupt(digitalPinToInterrupt(pinoBotao), tratarPressionamentoBotao, FALLING);

  // Conectar ao Wi-Fi
  WiFi.begin(ssid, senha);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Conectando ao WiFi...");
  }
  Serial.println("Conectado ao WiFi!");

  // Configurar OTA
  ArduinoOTA.onStart([]() {
    String tipo;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      tipo = "sketch";
    } else {  // U_SPIFFS
      tipo = "sistema de arquivos";
    }
    Serial.println("Iniciando atualização via OTA: " + tipo);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nFim da atualização OTA.");
  });
  ArduinoOTA.onProgress([](unsigned int progresso, unsigned int total) {
    Serial.printf("Progresso: %u%%\r", (progresso / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t erro) {
    Serial.printf("Erro [%u]: ", erro);
    if (erro == OTA_AUTH_ERROR) {
      Serial.println("Erro de autenticação");
    } else if (erro == OTA_BEGIN_ERROR) {
      Serial.println("Erro ao iniciar");
    } else if (erro == OTA_CONNECT_ERROR) {
      Serial.println("Erro de conexão");
    } else if (erro == OTA_RECEIVE_ERROR) {
      Serial.println("Erro ao receber dados");
    } else if (erro == OTA_END_ERROR) {
      Serial.println("Erro ao finalizar");
    }
  });
  ArduinoOTA.begin();
  Serial.println("Pronto para atualizações OTA.");
}

void loop() {
  ArduinoOTA.handle();  // Verifica se há uma atualização OTA disponível

  // Verificar se o botão foi pressionado
  if (botaoPressionado) {
    // Muda a cor do LED RGB para azul
    setColor(0, 0, 255);  // Azul
    Serial.println("Botão pressionado! LED RGB azul.");
    
    botaoPressionado = false; // Resetar o estado do botão

    // Bloquear o loop, simulando uma operação contínua
    while (true) {
      delay(1000); // Mantém o LED azul aceso indefinidamente
    }
  }

  // Ciclo de cores se o botão não foi pressionado
  setColor(255, 0, 0);  // Vermelho
  delay(1000);
  setColor(0, 255, 0);  // Verde
  delay(1000);
  setColor(0, 0, 255);  // Azul
  delay(1000);
}
